import sys
import textwrap

import requests


class UnsupportedParameter(Exception):
    pass


def define_method_name(interface: dict, method: dict) -> str:
    method_name = "{}_{}".format(interface["name"].lower(), method["name"].lower())
    if method["version"] != 1:
        method_name = "{}_{}".format(method_name, method["version"])
    return method_name[1:]  # The index removes the leading 'i'.


def define_method_args(method: dict) -> list:
    args = [define_arg(x) for x in method["parameters"]]
    args.insert(0, "self")
    return args


def define_arg(data: dict) -> str:
    """

    :param data:
    :return:
    :raises UnsupportedParameter: When a parameter has a type that is
        currently not supported.
    """

    if "[" in data["name"]:
        raise UnsupportedParameter("Unable to handle array parameters")

    type_map = {
        "int32": "int",
        "uint32": "int",
        "uint64": "int",
        "string": "str",
        "bool": "bool",
    }
    try:
        return "{}: {}{}".format(
            data["name"],
            type_map[data["type"]],
            " = None" if data["optional"] else "",
        )
    except KeyError:
        raise UnsupportedParameter(
            "Unable to handle parameter type {}".format(data["type"])
        )


def define_request_parameters_code(method: dict) -> str:
    required_params = []
    optional_params = []

    for param in method["parameters"]:
        if not param["optional"]:
            required_params.append(param)
        else:
            optional_params.append(param)

    code = ["params = {"]
    for param in required_params:
        code.append('        "{}": {},'.format(param["name"], param["name"]))
    code.append("    }")
    for param in optional_params:
        code.append("    if {}:".format(param["name"]))
        code.append('        params["{}"] = {}'.format(param["name"], param["name"]))

    return "\n".join(code)


def define_argument_checks(method: dict) -> str:
    code = ""

    # 'Translations' between API parameter names (the keys of the dict)
    # and Python attribute names (the values).
    argument_translations = {
        "steamid": "steam_id",
        "key": "key",
    }

    for param in method["parameters"]:
        if param["name"] in argument_translations:
            code = code + "    if not {} and not self.{}:\n".format(param["name"], argument_translations[param["name"]])
            code = code + "        raise ValueError('')\n"

    return code


def generate_method_definition(interface: dict, method: dict) -> str:
    # The official parameter definitions mix optional and required
    # parameters. Python needs required parameters to be defined before
    # optional parameters, so we sort them here.
    # TODO: The `key` and `steam_id` params should be made optional in Python, but not in API params.
    required_args = [param for param in method["parameters"] if not param["optional"]]
    optional_args = [param for param in method["parameters"] if param["optional"]]
    method["parameters"] = required_args + optional_args

    method_template = """
def {name}({args}) -> dict:
{args_check}
    url = "{url}"
    {params}

    response = requests.get(url, params=params)
    response.raise_for_status()

    return response.json()
    """

    args = {
        "name": define_method_name(interface, method),
        "args": ", ".join(define_method_args(method)),
        "args_check": define_argument_checks(method),
        "url": "https://api.steampowered.com/{}/{}/v{:0>4}/".format(
            interface["name"],
            method["name"],
            method["version"],
        ),
        "params": define_request_parameters_code(method),
    }

    definition = method_template.format(**args)
    return textwrap.indent(definition, "    ")


def main():
    source_code = [
        "# This file is generated by the generate_client.py script. Any changes",
        "# made to this file will be overwritten when that script is ran again.",
        "from builtins import int",
        "from typing import Optional",
        "",
        "import requests",
        "",
        "",
        "class BaseClient:",
        "    key: str",
        "    steam_id: Optional[int] = None",
        "",
        '    def __init__(self, key: str = "", steam_id: int = None):',
        '        """Initialize a new Client.',
        "",
        "        :param key: Your Steam API key. Only required if you need to call",
        "            non-public API endpoints.",
        "        :type key: string",
        "        :param steam_id: A Steam profile ID.",
        "        :type key: int",
        '        """',
        "        self.key = key",
        "        self.steam_id = steam_id",
        "",
    ]

    url = "https://api.steampowered.com/ISteamWebAPIUtil/GetSupportedAPIList/v0001/"
    params = {}

    if len(sys.argv) == 2:
        params = {"key": sys.argv[1]}

    response = requests.get(url, params=params)
    response.raise_for_status()

    for interface in response.json()["apilist"]["interfaces"]:
        for method in interface["methods"]:
            if method["httpmethod"] != "GET":
                # TODO: Implement support for non-GET methods.
                continue

            try:
                method_definition = generate_method_definition(interface, method)
                source_code += method_definition.split("\n")
            except UnsupportedParameter:
                # TODO: Handle unknown parameter types.
                continue

    with open("steamwebapiclient/generated_client.py", "w", encoding="utf-8") as f:
        f.write("\n".join(source_code))


if __name__ == "__main__":
    main()
